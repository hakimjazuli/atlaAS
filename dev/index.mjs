// @ts-check

import { __PHPDev } from '@html_first/js_lib_template';

new __PHPDev({
	folderPath: './src',
	readMePath: './README.md',
	description: [
		'# atlaAS',
		'- php:',
		'> - [file system routing](https://github.com/hakimjazuli/atlaAS/blob/main/README.md#routing);',
		'> - [setting up middleware](https://github.com/hakimjazuli/atlaAS/blob/main/README.md#middlewares);',
		'> - [file serving](https://github.com/hakimjazuli/atlaAS/blob/main/README.md#serving-files);',
		'> - [connection and SQL DB querying library](https://github.com/hakimjazuli/atlaAS/blob/main/README.md#sql-query);',
		'- <strike>this library is designed to be used in the conjuction with our client side HATEOAS sister</strike>',
		'library *https://github.com/hakimjazuli/atlaAS_client* in mind;',
		'- however you can still uses it as Backend normally for, like:',
		'> - building REST json api backend: using our "_HtmlFirstatlaASMiddlewares\\_Middleware_",',
		'> to set up header default header on `/api/**` routes;',
		'> - serving files: using our "_HtmlFirstatlaASRouter\\_MapResources;_";',
		'> - building HATEOAS backend for htmx/other HATEOAS library/framework;',
		'> > - in fact you might be surprissed how good File System Routing might fare for',
		'> > htmx/other HATEOAS library due to the nature of atlaAS code splitting in general;',
		'> >',
		'> > > - automatic routes setup;',
		'> > > - no need to register it using framework class instances first;',
		'> >',
		'> > - in htmx use case, you can even opt out from using `hx-select` and/or `hx-target` as',
		'> > the returned html needed are easily split per routes file;',
		'> > - not to mention how php is a natural templating language for html _(well... if',
		'> > there\'s any more natural language, php is still the most easiest to set up, "there\'s no setup", just use `?>` to enter front end and `<?php` to go back to backend)_',
		"> > > - just make sure to sanitize your output, so you don't get XSS attack from user",
		'> > > generated content;',
		'## assumption',
		'this library assumes you are familiar with:',
		'- php psr-4 auto-loading, using composer;',
		'- php OOP(for extending, and using our helper classes in general, also **atlaAS** uses little',
		'abstraction, and not neccesarily a _battery-included_ library, so you have to have good',
		'underlying php OOP in generals);',
		'## how to install',
		'```shell',
		'composer require html_first/atla-as',
		'```',
		'## how to initialize',
		'set your `.htaccess` on your static public folder into something like this:',
		'```t',
		'<IfModule mod_rewrite.c>',
		'	SetEnvIf Origin "^http(s)?://(.+.)?(127.0.0.1:8000)$" ACAO=$0',
		'	# SetEnvIf Origin "^http(s)?://(.+.)?(127.0.0.1:8000|172.23.224.1:8000)$" ACAO=$0',
		'	Header set Access-Control-Allow-Origin "%{ACAO}e" env=ACAO',
		'		<IfModule mod_negotiation.c>',
		'			Options -MultiViews -Indexes',
		'		</IfModule>',
		'	RewriteEngine On',
		'	# Handle Authorization Header',
		'	RewriteCond %{HTTP:Authorization} .',
		'	RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]',
		'	# Redirect Trailing Slashes If Not A Folder...',
		'	RewriteCond %{REQUEST_FILENAME} !-d',
		'	RewriteCond %{REQUEST_URI} (.+)/$',
		'	RewriteRule ^ %1 [L,R=301]',
		'	# Send Requests To Front Controller...',
		'	RewriteCond %{REQUEST_FILENAME} !-d',
		'	RewriteCond %{REQUEST_FILENAME} !-f',
		'	RewriteRule ^ index.php [L]',
		'</IfModule>',
		'```',
		'## Credit(s)',
		'this library is inspired by:',
		'- htmx.js: *https://htmx.org/*',
		"> - more precisely it's HATEOAS paradigm in general;",
		'- sveltekit: https://kit.svelte.dev/',
		"> - more precisely it's clean File System Routing in general;",
		'> - and many other js meta framework with FS Routing;',
		'## Globals',
		'- class prefixed "__" with are singleton made globals by accessing it like this `__ClassName::$__`;',
		'## Setting_Class',
		'- class that are need to be extended, instantiated as argument for `__atlaAS`',
		"- modifiy it's properties and methods as you needed",
		'## Internals',
		'- core class that are meant to be used only for library internals functionality and not to be called on the app;',
	],
}).run();
